@page "/"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorWebAssemblySignalRApp.Shared.Rpc
@implements IAsyncDisposable
@inject HttpClient Http

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput"/>
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50"/>
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<button @onclick="SendTyped" disabled="@(!IsConnected)">SendTyped</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    private async Task SendTyped()
    {
        var result = await Consumer
            .Send<EchoRequest, EchoResponse>(new EchoRequest() { Str = userInput }
                , async (name, payload) =>
                {
                    Console.WriteLine($"name={name}");
                    Console.WriteLine($"payload={payload}");
                    var m = RpcMessage.Encode(name, payload);
                    var res = await Http
                        .PostAsync(RpcMessage.HandlerName, new StringContent(m));
                    var str = await res.Content.ReadAsStringAsync();
                    return str;
                });
        messages.Add(result.Result);
        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}